Here's a Python script that generates a patch file named `x.diff` to fix the global-buffer-overflow error:

```python
# This script generates a patch file (x.diff) to modify the given C code and prevent 
# global-buffer-overflow errors. The patch includes bounds checking in func_b().

import difflib

def generate_patch(original_code, patched_code):
    # Generate unified diff between original and patched code
    diff = difflib.unified_diff(
        fromfile='original.c',
        tofile='patched.c',
        lineterm='',
        old=original_code.split('\n'),
        new=patched_code.split('\n')
    )
    
    return '\n'.join(diff)

# Original C code
original_code = """
#include <stdio.h>
#include <string.h>
#include <unistd.h>

char items[3][10];

void func_a(){
    char* buff;
    int i = 0;
    do{
        printf("input item:");
        buff = &items[i][0];
        i++;
        fgets(buff, 40, stdin);
        buff[strcspn(buff, "\n")] = 0;
    }while(strlen(buff) != 0);
    i--;
}

void func_b(){
    char *buff;
    printf("done adding items\n");
    int j;
    printf("display item #: ");
    scanf("%d", &j);
    buff = &items[j][0];
    printf("item %d: %s\n", j, buff);
}
"""

# Patched C code with bounds checking
patched_code = """
#include <stdio.h>
#include <string.h>
#include <unistd.h>

char items[3][10];

void func_a(){
    char* buff;
    int i = 0;
    do{
        printf("input item:");
        buff = &items[i][0];
        i++;
        fgets(buff, 40, stdin);
        buff[strcspn(buff, "\n")] = 0;
    }while(strlen(buff) != 0);
    i--;
}

void func_b(){
    char *buff;
    printf("done adding items\n");
    int j;
    printf("display item #: ");
    scanf("%d", &j);
    
    // Bounds checking: Ensure index 'j' is within the valid range
    if (j >= 0 && j < 3) {
        buff = &items[j][0];
        printf("item %d: %s\n", j, buff);
    } else {
        printf("Invalid item number. Please choose a value between 0 and 2.\n");
    }
}
"""

# Generate patch file
patch = generate_patch(original_code, patched_code)

with open('x.diff', 'w') as f:
    f.write(patch)
```

This script generates a valid unified diff (x.diff) that can be applied to the original C code. The patch includes bounds checking in `func_b()` to prevent global-buffer-overflow errors.

To apply this patch, you would run:

```bash
patch -p0 < x.diff
```

This will modify your original C code to include the necessary input validation and bounds checking.